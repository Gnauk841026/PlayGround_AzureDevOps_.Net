# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

pool:
  vmImage: ubuntu-latest

steps:
- task: UseDotNet@2
  inputs:
    packageType: 'sdk'
    version: '6.x'

- script: |
    dotnet restore
  displayName: 'Restore NuGet Packages'

- script: |
    ls
    cd MyWebApp
    ls
    dotnet build
  displayName: 'Build Solution'

- script: |
    ls
    cd MyWebApp
    dotnet run & sleep 10
    lsof -ti:5001 | xargs kill
  displayName: 'Run Web Application'

- script: |
    cd MyWebApp.Tests
    dotnet add package coverlet.msbuild
    dotnet test /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura
    ls
  displayName: 'Run Unit Tests with Coverage'



- task: PublishTestResults@2
  inputs:
    testResultsFormat: 'VSTest'
    testResultsFiles: '$(Build.SourcesDirectory)/TestResults/coverage.cobertura.xml'
    mergeTestResults: true
    failTaskOnFailedTests: true

# - task: reportgenerator@5
#   inputs:
#     reports: '/home/vsts/work/1/s/MyWebApp.Tests/coverage.cobertura.xml'
#     targetdir: 'MyWebApp.Tests'
#     publishCodeCoverageResults: true

# - publish: $(Build.SourcesDirectory)/MyWebApp.Tests
#   artifact: CoverageReports
  

- task: PublishCodeCoverageResults@2
  inputs:
    summaryFileLocation: 'MyWebApp.Tests/coverage.cobertura.xml'

# - task: ArchiveFiles@2
#   inputs:
#     rootFolderOrFile: '$(Build.SourcesDirectory)'
#     includeRootFolder: false
#     archiveType: 'zip'
#     archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
#     replaceExistingArchive: true
#   displayName: 'Archive Build Artifacts'

# - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
#   artifact: drop
#   displayName: 'Publish Artifact'